#!/bin/bash -eu
# Inspired by https://github.com/kclejeune/system/blob/master/bin/do.py

# this should use realpath, but the MacOS BSD version
# is a joke and doesn't work for these purposes
SCRIPT_DIR="$(python -c "import os; import sys; print(os.path.realpath('${BASH_SOURCE[0]%/*}'))")"
GETOPT="$SCRIPT_DIR/getopt"

# Configuration Targets
NIXOS=nixosConfigurations
DARWIN=darwinConfigurations
HOME_MANAGER=homeConfigurations


get_conf_target () {
    ! command -v nixos-rebuild > /dev/null || { echo "$NIXOS"; return; }
    [ "$(uname -s)" != "Darwin" ] || { echo "$DARWIN"; return; }
    echo "$HOME_MANAGER"
}


ercho () {
    local MSG="${1:?message to echo is required}"
    echo -e >&2 "$0: $MSG"
    [ -z "${2:-}" ] || exit $2
}

echou () {
    echo -e >&2 "$1"
    exit 0
}


has_nix () {
    command -v nix > /dev/null
}


install () {
    local URL=https://github.com/numtide/nix-unstable-installer/releases
    local FORCE=false
    local DAEMON=true
    local USAGE=$(cat <<EOF
USAGE: $0 ${FUNCNAME[0]} [ OPTIONS ]

Install nix to the local system.

OPTIONS:
    -h/--help         show this message
    -v/--version      specify release version, default latest
    -F/--force        force re-run of installer
    -s/--single-user  install in single user mode, default false

To find available release versions see '$URL'.
EOF
    )

    . $GETOPT -n "$0: ${FUNCNAME[0]}" -o "shv:F" -l "single-user,help,version:,force" -- "$@"

    local ARG i=0
    while [ "$i" -lt "${#OPTS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        case $ARG in
            -h|--help)
                echou "$USAGE"
                ;;
            -v|--version)
                local RELEASE="${OPTS[$i]}"
                i=$((i+1))
                ;;
            -F|--force)
                FORCE=true
                ;;
            -s|--single-user)
                DAEMON=
                ;;
            --)
                break
                ;;
            *)
                ercho "${FUNCNAME[0]}: unknown option: '$ARG'" 1
                ;;
        esac
    done

    # handle unknown arguments (allowing 'help')
    i=0
    while [ "$i" -lt "${#ARGS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        [ "$ARG" == "help" ] || ercho "${FUNCNAME[0]}: unknown argument: '$ARG'" 1
        echou "$USAGE"
    done

    $FORCE || ! has_nix \
        || ercho "${FUNCNAME[0]}: nix is already installed; use '-F/--force' to re-run installer" 1

    if [ -n "${RELEASE:-}" ]; then
        URL="$URL/download/$RELEASE/install"
    else
        URL="$URL/latest/download/install"
    fi

    #exec bash <(curl -L $URL) ${DAEMON:+--daemon }${FLAG:-}
    ercho "NOTICE: due to MacOS installation issues, the version of"
    ercho "the nix installer has been overriden with a pre-release pkg."
    # https://github.com/NixOS/nix/pull/4289#user-content-try-it-out
    exec sh <(curl https://abathur-nix-install-tests.cachix.org/serve/yihf8zbs0jwph2rs9qfh80dnilijxdi2/install) --tarball-url-prefix https://abathur-nix-install-tests.cachix.org/serve
}


uninstall () {
    ercho "${FUNCNAME[0]}: not yet implemented"
    ercho "please see the following for a manual proceedure:"
    ercho "https://gist.github.com/chriselsner/3ebe962a4c4bd1f14d39897fc5619732"
    exit 1
}


bootstrap () {
    local HOSTNAME=$(hostname)
    local USAGE=$(cat <<EOF
USAGE: $0 ${FUNCNAME[0]} [ OPTIONS ]

Bootstrap the initial system config and the installation
of all required nix packages from a base system with a
basic nix installation (see the 'install' command).

OPTIONS:
    -h/--help        show this message
    --home-manager*  force home-manager-only build (discovered if needed by default)
    --darwin*        force MacOS system build (discovered if needed by default)
    --nixos*         force NixOS system build (discovered if needed by default)
    --host           hostname to use for reference configuration (default from system)
    --switch         activate the new command upon successful build (default false)

*mutually-exclusive
EOF
    )

    . $GETOPT -n "$0: ${FUNCNAME[0]}" -o "h" -l "help,home-manager,darwin,nixos,host:,switch" -- "$@"

    local TARGET SWITCH=false ARG i=0
    while [ "$i" -lt "${#OPTS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        case $ARG in
            -h|--help)
                echou "$USAGE"
                ;;
            --host)
                HOSTNAME="${OPTS[$i]}"
                i=$((i+1))
                ;;
            --home-manager)
                [ -z "$TARGET" ] || ercho "${FUNCNAME[0]}: cannot specify multiple build targets" 1
                TARGET="$HOME_MANAGER"
                ;;
            --darwin)
                [ -z "$TARGET" ] || ercho "${FUNCNAME[0]}: cannot specify multiple build targets" 1
                TARGET="$DARWIN"
                ;;
            --nixos)
                [ -z "$TARGET" ] || ercho "${FUNCNAME[0]}: cannot specify multiple build targets" 1
                TARGET="$NIXOS"
                ;;
            --switch)
                SWITCH=true
                ;;
            --)
                break
                ;;
            *)
                ercho "${FUNCNAME[0]}: unknown option: '$ARG'" 1
                ;;
        esac
    done

    # handle unknown arguments (allowing 'help')
    i=0
    while [ "$i" -lt "${#ARGS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        [ "$ARG" == "help" ] || ercho "${FUNCNAME[0]}: unknown argument: '$ARG'" 1
        echou "$USAGE"
    done

    has_nix || ercho "nix is not on the path; do you need to run the install command first?" 1

    # if unspecified, figure out the build/config target type
    [ -n "$TARGET" ] || TARGET="$(get_conf_target)"

    cd "$SCRIPT_DIR/.."
    nix build ".#${TARGET}.${HOSTNAME}.config.system.build.toplevel" -v --experimental-features "nix-command flakes"

    if  $SWITCH; then
        ./result/activate-user
        sudo ./result/activate
    else
        ercho "NOTICE: result built but not activated. Run again with '--switch' or manually run the following:"
        ercho "    $(pwd)/result/activate-user"
        ercho "    sudo $(pwd)/result/activate"
    fi
}


build () {
    _build ${FUNCNAME[0]} "$@"
}


switch () {
    _build ${FUNCNAME[0]} "$@"
}


_build () {
    local ACTION="${1}"; shift ||:
    local HOSTNAME=$(hostname)
    local USAGE=$(cat <<EOF
USAGE: $0 ${ACTION} [ OPTIONS ]

Command to $ACTION the user/system configuration.
Discovers unspecified build parameters from the system.

OPTIONS:
    -h/--help        show this message
    --home-manager*  force home-manager-only build (discovered if needed by default)
    --darwin*        force MacOS system build (discovered if needed by default)
    --nixos*         force NixOS system build (discovered if needed by default)
    --host           hostname to use for reference configuration (default from system)

*mutually-exclusive
EOF
    )

    . $GETOPT -n "$0: ${ACTION}" -o "h" -l "help,home-manager,darwin,nixos,host:" -- "$@"

    local TARGET ARG i=0
    while [ "$i" -lt "${#OPTS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        case $ARG in
            -h|--help)
                echou "$USAGE"
                ;;
            --host)
                HOSTNAME="${OPTS[$i]}"
                i=$((i+1))
                ;;
            --home-manager)
                [ -z "$TARGET" ] || ercho "${ACTION}: cannot specify multiple build targets" 1
                TARGET="$HOME_MANAGER"
                ;;
            --darwin)
                [ -z "$TARGET" ] || ercho "${ACTION}: cannot specify multiple build targets" 1
                TARGET="$DARWIN"
                ;;
            --nixos)
                [ -z "$TARGET" ] || ercho "${ACTION}: cannot specify multiple build targets" 1
                TARGET="$NIXOS"
                ;;
            --)
                break
                ;;
            *)
                ercho "${ACTION}: unknown option: '$ARG'" 1
                ;;
        esac
    done

    # handle unknown arguments (allowing 'help')
    i=0
    while [ "$i" -lt "${#ARGS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        [ "$ARG" == "help" ] || ercho "${ACTION}: unknown argument: '$ARG'" 1
        echou "$USAGE"
    done

    [ -n "$TARGET" ] || TARGET="$(get_conf_target)"

    local CMD
    case "$TARGET" in
        $NIXOS)
            CMD="sudo nixos-rebuild"
            ;;
        $DARWIN)
            CMD="darwin-rebuild"
            ;;
        $HOME_MANAGER)
            CMD="home-manager"
            ;;
        *)
            ercho "${ACTION}: unknown target type: '$TARGET'" 1
            ;;
    esac


    cd "$SCRIPT_DIR/.."
    $CMD $ACTION --flake ".#${HOSTNAME}"
    ercho "${ACTION}: NOTICE: result built but not activated. Run the 'switch' command to apply it."
}


update () {
    local USAGE=$(cat <<EOF
USAGE: $0 ${FUNCNAME[0]} [ OPTIONS ]

Update one or more flake input versions in the lock file.

OPTIONS:
    -f/--flake   name of a flake to update (default all; can specify multiple times)
    -c/--commit  commit the lockfile changes
    -h/--help    show this message
EOF
    )

    . $GETOPT -n "$0: ${FUNCNAME[0]}" -o "hf:c" -l "help,flake:,commit" -- "$@"

    local FLAKES=() ARG i=0
    while [ "$i" -lt "${#OPTS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        case $ARG in
            -h|--help)
                echou "$USAGE"
                ;;
            -f|--flake)
                FLAKES+=("${OPTS[$i]}")
                i=$((i+1))
                ;;
            --commit)
                COMMIT=true
                ;;
            --)
                break
                ;;
            *)
                ercho "${ACTION}: unknown option: '$ARG'" 1
                ;;
        esac
    done

    # handle unknown arguments (allowing 'help')
    i=0
    while [ "$i" -lt "${#ARGS[@]}" ]; do
        ARG="${OPTS[$i]}"
        i=$((i+1))
        [ "$ARG" == "help" ] || ercho "${ACTION}: unknown argument: '$ARG'" 1
        echou "$USAGE"
    done

    local ACTION=update UPDATES=""
    for FLAKE in ${FLAKES[@]}; do
        ACTION=lock
        UPDATES="$UPDATES --update-input $FLAKE"
    done

    cd "$SCRIPT_DIR/.."
    nix flake ${ACTION}${COMMIT:+ --commit-lock-file}${UPDATES}
}


pull () {
    local USAGE=$(cat <<EOF
USAGE: $0 ${FUNCNAME[0]} [ OPTIONS ]

Update local repo with remote changes.
Any uncommitted changes will be stashed then re-applied.

OPTIONS:
    -h/--help        show this message
EOF
    )

    [ "$#" -eq 0 ] || {
        case "$1" in
            help|--help|-h) echou "$USAGE" ;;
            *) ercho "${FUNCNAME[0]}: unknown argument: '$ARG'" 1 ;;
        esac
    }

    git stash && git pull --rebase && git stash pop
}


push () {
    local USAGE=$(cat <<EOF
USAGE: $0 ${FUNCNAME[0]} [ OPTIONS ]

Update remote repo with local changes.

OPTIONS:
    -h/--help        show this message
EOF
    )

    [ "$#" -eq 0 ] || {
        case "$1" in
            help|--help|-h) echou "$USAGE" ;;
            *) ercho "${FUNCNAME[0]}: unknown argument: '$ARG'" 1 ;;
        esac
    }

    git push
}


which () {
    local USAGE=$(cat <<EOF
USAGE: $0 ${FUNCNAME[0]} [ OPTIONS ]

Print the absolute path to the configuration directory.

OPTIONS:
    -h/--help        show this message
EOF
    )

    [ "$#" -eq 0 ] || {
        case "$1" in
            help|--help|-h) echou "$USAGE" ;;
            *) ercho "${FUNCNAME[0]}: unknown argument: '$ARG'" 1 ;;
        esac
    }

    cd "$SCRIPT_DIR/.." && pwd
}


main () {
    local USAGE=$(cat <<EOF
USAGE: $0 COMMAND [ COMMAND_OPTS ] [ COMMAND_ARGS ]

nix system managment utility

Supported Commands:
    help       show this message
    install    install nix to this system
    bootstrap  install nix and apply config
    build      build a new config
    switch     build and apply a config
    uninstall  uninstall nix/config from the system
    pull       git pull upstream changes
    push       git push local changes upstream
    update     update the flake locks
    which      print the config directory path

All commmands support 'help' for more information.
EOF
    )

    local CMD="${1:-}"; shift ||:
    case "${CMD:-}" in
        install)        install "$@" ;;
        uninstall)      uninstall "$@" ;;
        bootstrap)      bootstrap "$@" ;;
        build)          build "$@" ;;
        switch)         switch "$@" ;;
        pull)           pull "$@" ;;
        update)         update "$@" ;;
        which)          which "$@" ;;
        help|-h|--help) echou "$USAGE" ;;
        ?*) ercho "unknown command: '$CMD'" 1 ;;
        *)  echou "$USAGE" ;;
    esac
}


main "$@"
